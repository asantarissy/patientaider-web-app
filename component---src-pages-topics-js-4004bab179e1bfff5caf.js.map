{"version":3,"sources":["webpack:///./src/lib/translations.js","webpack:///./src/pages/topics.js"],"names":["translations","location","path","language","qs","parse","search","ignoreQueryPrefix","lang","title","en","es","zh","ar","preparing","inHospital","recovering","justBrowsing","Ul","styled","ul","Filters","div","Label","label","Index","props","state","adult","pediatric","pregnancy","onToggle","bind","event","this","setState","target","name","checked","render","data","rest","languageIds","htmlFor","type","id","value","onChange","allContentfulTopic","edges","filter","node","searchParams","URLSearchParams","get","categories","includes","topic","has","node_locale","tags","undefined","sort","a","b","nameA","toLowerCase","nameB","key","to","stringify","addQueryPrefix","className","subtitle","icon","src","allFile","find","el","publicURL","React","Component","q","propTypes","PropTypes","object","isRequired"],"mappings":"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","file":"component---src-pages-topics-js-4004bab179e1bfff5caf.js","sourcesContent":["import qs from 'qs';\n\nexport default function translations(location, path) {\n  const map = {\n    title: {\n      en: 'Where is the patient?',\n      es: '¿Dónde está el paciente?',\n      zh: '病人在哪裡',\n      ar: 'أين المريض؟',\n    },\n    preparing: {\n      en: 'At home, preparing',\n      es: 'En casa, preparando',\n      zh: '在家裡，準備中',\n      ar: 'يستعد في المنزل',\n    },\n    inHospital: {\n      en: 'In the hospital',\n      es: 'En el hospital',\n      zh: '在醫院',\n      ar: 'في المستشفى',\n    },\n    recovering: {\n      en: 'At home, recovering',\n      es: 'En casa, recuperandose',\n      zh: '在家裡，恢復中',\n      ar: 'يتعافى في المنزل',\n    },\n    justBrowsing: {\n      en: 'I don’t know, I’m just browsing…',\n      es: 'No se, solo estoy navegando…',\n      zh: '不知道，只是瀏覽一下',\n      ar: '…لا أعرف ، أنا فقط أتصفح',\n    },\n    'tags.adult': {\n      en: 'Adult',\n      es: 'Adulto',\n      zh: '成人',\n      ar: 'البالغين',\n    },\n    'tags.pediatric': {\n      en: 'Pediatric',\n      es: 'Pediátrico',\n      zh: '兒科',\n      ar: 'الأطفال',\n    },\n    'tags.pregnancy': {\n      en: 'Pregnancy',\n      es: 'Embarazo',\n      zh: '懷孕',\n      ar: 'الحوامل',\n    },\n  };\n\n  const language =\n    qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    }).lang || 'en';\n\n  return map[path][language];\n}\n","import PropTypes from 'prop-types';\nimport qs from 'qs';\nimport React from 'react';\nimport styled from 'styled-components';\nimport SVG from 'react-inlinesvg';\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\n\nimport translations from '../lib/translations';\n\nconst Ul = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n\n  li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 0 0 1rem;\n  }\n\n  li a {\n    text-decoration: none;\n  }\n\n  li .isvg {\n    min-width: 2.5rem;\n    text-align: center;\n  }\n\n  li svg {\n    height: 2rem;\n    width: auto;\n    opacity: 0.5;\n\n    path {\n      fill: #333;\n    }\n  }\n\n  .subtitle {\n    opacity: 0.5;\n  }\n`;\n\nconst Filters = styled.div`\n  display: flex;\n  margin-bottom: 1rem;\n\n  label {\n    margin-right: 0.25rem;\n  }\n`;\n\nconst Label = styled.label`\n  border: 1px solid #ccc;\n  padding: 0.25rem;\n  border-radius: 4px;\n  display: flex;\n  align-items: baseline;\n\n  input {\n    margin-right: 0.5rem;\n  }\n`;\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      adult: true,\n      pediatric: true,\n      pregnancy: true,\n    };\n    this.onToggle = this.onToggle.bind(this);\n  }\n\n  onToggle(event) {\n    this.setState({\n      [event.target.name]: event.target.checked,\n    });\n  }\n\n  render() {\n    const { data, location, ...rest } = this.props;\n    const { adult, pregnancy, pediatric } = this.state;\n\n    function sortAlphabetically(a, b) {\n      const nameA = a.node.title.toLowerCase();\n      const nameB = b.node.title.toLowerCase();\n      if (nameA < nameB)\n        // sort string ascending\n        return -1;\n      if (nameA > nameB) return 1;\n      return 0; // default return value (no sorting)\n    }\n\n    function filterCategories(node) {\n      const searchParams = new URLSearchParams(location.search);\n      if (searchParams.get('category') === 'all') {\n        return true;\n      }\n      return node.node.categories.includes(searchParams.get('category'));\n    }\n\n    const languageIds = {\n      en: 'en-US',\n      es: 'es-419',\n      zh: 'zh-Hant-TW',\n      ar: 'ar-SA',\n    };\n\n    function filterLanguages(topic) {\n      const searchParams = new URLSearchParams(location.search);\n      if (searchParams.has('lang')) {\n        return topic.node.node_locale === languageIds[searchParams.get('lang')];\n      }\n      return topic.node.node_locale === 'en-US';\n    }\n\n    function filterTags(topic) {\n      if (topic.node.tags.includes(adult ? 'adult' : undefined)) {\n        return true;\n      }\n      if (topic.node.tags.includes(pediatric ? 'pediatric' : undefined)) {\n        return true;\n      }\n      if (topic.node.tags.includes(pregnancy ? 'pregnancy' : undefined)) {\n        return true;\n      }\n      return false;\n    }\n\n    return (\n      <Layout location={location} {...rest}>\n        <Filters>\n          <Label htmlFor=\"adult\">\n            <input\n              checked={adult}\n              type=\"checkbox\"\n              name=\"adult\"\n              id=\"adult\"\n              value=\"adult\"\n              onChange={this.onToggle}\n            />\n            {translations(location, 'tags.adult')}\n          </Label>\n          <Label htmlFor=\"pediatric\">\n            <input\n              checked={pediatric}\n              type=\"checkbox\"\n              name=\"pediatric\"\n              id=\"pediatric\"\n              value=\"pediatric\"\n              onChange={this.onToggle}\n            />\n            {translations(location, 'tags.pediatric')}\n          </Label>\n          <Label htmlFor=\"pregnancy\">\n            <input\n              checked={pregnancy}\n              type=\"checkbox\"\n              name=\"pregnancy\"\n              id=\"pregnancy\"\n              value=\"pregnancy\"\n              onChange={this.onToggle}\n            />\n            {translations(location, 'tags.pregnancy')}\n          </Label>\n        </Filters>\n        <Ul>\n          <For\n            each=\"topic\"\n            of={data.allContentfulTopic.edges\n              .filter(filterCategories)\n              .filter(filterLanguages)\n              .filter(filterTags)\n              .sort(sortAlphabetically)}\n          >\n            <li key={topic.node.id}>\n              <span>\n                <Link\n                  to={`/topic/${topic.node.id}${qs.stringify(\n                    {\n                      lang: qs.parse(location.search, {\n                        ignoreQueryPrefix: true,\n                      }).lang,\n                    },\n                    { addQueryPrefix: true },\n                  )}`}\n                >\n                  {topic.node.title}\n                </Link>\n                <br />\n                <span className=\"subtitle\">{topic.node.subtitle}</span>\n              </span>\n              <If condition={topic.node.icon}>\n                {/* todo: catcherrorboundary */}\n                <SVG\n                  src={\n                    data.allFile.edges.find(\n                      el => el.node.name === topic.node.icon,\n                    ).node.publicURL\n                  }\n                />\n              </If>\n            </li>\n          </For>\n        </Ul>\n      </Layout>\n    );\n  }\n}\n\nexport const q = graphql`\n  query {\n    allFile(filter: { extension: { eq: \"svg\" } }) {\n      edges {\n        node {\n          publicURL\n          name\n        }\n      }\n    }\n    allContentfulTopic {\n      edges {\n        node {\n          id\n          icon\n          title\n          subtitle\n          categories\n          node_locale\n          tags\n        }\n      }\n    }\n  }\n`;\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired, // eslint-disable-line\n  location: PropTypes.object.isRequired, // eslint-disable-line\n};\n\nexport default Index;\n"],"sourceRoot":""}